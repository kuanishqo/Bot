import asyncio
import logging
import os
import threading
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from flask import Flask

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
GROUP_ID = os.getenv("GROUP_ID")  # –í—Å—Ç–∞–≤—å ID —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host="0.0.0.0", port=8080)

def keep_alive():
    server = threading.Thread(target=run)
    server.start()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)
class SupportForm(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_phone_number = State()
    waiting_for_question = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì© –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–ò–º—è –∏ –§–∞–º–∏–ª–∏—é*:", parse_mode="Markdown")
    await state.set_state(SupportForm.waiting_for_full_name)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.message(SupportForm.waiting_for_full_name)
async def get_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:", parse_mode="Markdown")
    await state.set_state(SupportForm.waiting_for_phone_number)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
@dp.message(SupportForm.waiting_for_phone_number)
async def get_phone_number(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.", reply_markup=menu_keyboard)
    await state.set_state(SupportForm.waiting_for_question)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message(SupportForm.waiting_for_question)
async def forward_question(message: Message, state: FSMContext):
    user_data = await state.get_data()
    full_name = user_data.get("full_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    phone_number = user_data.get("phone_number", "–ù–µ —É–∫–∞–∑–∞–Ω")
    user_name = f"@{message.from_user.username}" if message.from_user.username else f"[{full_name}](tg://user?id={message.from_user.id})"
    question = message.text

    support_message = (
        f"üÜï *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!*\n\n"
        f"üë§ *–ò–º—è:* {full_name}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone_number}\n"
        f"üîó *–ü—Ä–æ—Ñ–∏–ª—å:* {user_name}\n"
        f"‚ùì *–í–æ–ø—Ä–æ—Å:* {question}\n\n"
        f"üë§ ID: `{message.from_user.id}`"
    )

    if GROUP_ID:
        await bot.send_message(GROUP_ID, support_message, parse_mode="Markdown")
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!", reply_markup=menu_keyboard)
    else:
        await message.answer("–û—à–∏–±–∫–∞: GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã!")

# –ö–æ–º–∞–Ω–¥–∞ "–û –Ω–∞—Å"
@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message):
    await message.answer("–ú—ã ‚Äì —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à–∏ –∞–¥–º–∏–Ω—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º!")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã
@dp.message()
async def get_group_id(message: Message):
    if message.chat.type in ["group", "supergroup"]:
        await message.answer(f"ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{message.chat.id}`", parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è UptimeRobot
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
